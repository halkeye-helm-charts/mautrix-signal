# Default values for mautrix-signal.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  mautrixSignal:
    repository: dock.mau.dev/mautrix/signal
    tag: "{{ .Chart.AppVersion }}"
    pullPolicy: Always
  signald:
    repository: signald/signald
    tag: amd64-7354fec1d4233224e6827869f64d95ea06981205
    pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # privileged: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  externalTrafficPolicy:
  type: ClusterIP
  port: 29328

probes:
  liveness:
    failureThreshold: 5
    periodSeconds: 10
  readiness:
    failureThreshold: 5
    periodSeconds: 10
  startup:
    initialDelaySeconds: 5
    failureThreshold: 30
    periodSeconds: 10

config:
  # Homeserver details
  homeserver:
    # config.homeserver.address -- The address that this appservice can use to connect to the homeserver.
    address: https://example.com
    # config.homeserver.domain -- The domain of the homeserver (for MXIDs, etc).
    domain: example.com
    # config.homeserver.verify_ssl -- Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
    asmux: false

  # Application service host/registration related details
  # Changing these values requires regeneration of the registration.
  appservice:
    # config.appservice.address -- The address that the homeserver can use to connect to this appservice.
    address: http://localhost:29328
    # When using https:// the TLS certificate and key files for the address.
    tls_cert: false
    tls_key: false

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29328
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. Only Postgres is currently supported.
    database: postgres://username:password@hostname/db

    # The unique ID of this appservice.
    id: signal
    # Username of the appservice bot.
    bot_username: signalbot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Signal bridge bot
    bot_avatar: mxc://maunium.net/wPJgTQbZOtpBFmDNkiNEMDUp

    # Community ID for bridged users (changes registration file) and rooms.
    # Must be created manually.
    #
    # Example: "+signal:example.com". Set to false to disable.
    community_id: false

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: false

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: ""
    hs_token: ""

  # Prometheus telemetry config. Requires prometheus-client to be installed.
  metrics:
    enabled: false
    listen_port: 8000

  signal:
    # Path to signald unix socket
    socket_path: /signald/signald.sock
    # Directory for temp files when sending files to Signal. This should be an
    # absolute path that signald can read. For attachments in the other direction,
    # make sure signald is configured to use an absolute path as the data directory.
    outgoing_attachment_dir: /data/tmp/outgoing_attachment_dir
    # Directory where signald stores avatars for groups.
    avatar_dir: /signald/avatars
    # Whether or not message attachments should be removed from disk after they're bridged.
    remove_file_after_handling: true

  # Bridge config
  bridge:
    # Localpart template of MXIDs for Signal users.
    # {userid} is replaced with an identifier for the Signal user.
    username_template: "signal_{userid}"
    # Displayname template for Signal users.
    # {displayname} is replaced with the displayname of the Signal user, which is the first
    # available variable in displayname_preference. The variables in displayname_preference
    # can also be used here directly.
    displayname_template: "{displayname} (Signal)"
    # Whether or not contact list displaynames should be used.
    # Using this isn't recommended on multi-user instances.
    allow_contact_list_name_updates: false
    # Available variables: full_name, first_name, last_name, phone, uuid
    displayname_preference:
      - full_name
      - phone

    # Whether or not to create portals for all groups on login/connect.
    autocreate_group_portal: true
    # Whether or not to create portals for all contacts on login/connect.
    autocreate_contact_portal: false
    # Whether or not to use /sync to get read receipts and typing notifications
    # when double puppeting is enabled
    sync_with_custom_puppets: true
    # Whether or not to update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    sync_direct_chat_list: false
    # Allow using double puppeting from any server with a valid client .well-known file.
    double_puppet_allow_discovery: false
    # Servers to allow double puppeting from, even if double_puppet_allow_discovery is false.
    double_puppet_server_map: {}
    ##    example.com: https://example.com
    # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    # If using this for other servers than the bridge's server,
    # you must also set the URL in the double_puppet_server_map.
    login_shared_secret_map: {}
    # example.com: foo
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: true
    # End-to-bridge encryption support options. These require matrix-nio to be installed with pip
    # and login_shared_secret to be configured in order to get a device for the bridge bot.
    #
    # Additionally, https://github.com/matrix-org/synapse/pull/5758 is required if using a normal
    # application service.
    encryption:
      # Allow encryption, work in group chat rooms with e2ee enabled
      allow: false
      # Default to encryption, force-enable encryption in all portals the bridge creates
      # This will cause the bridge bot to be in private chats for the encryption to work properly.
      default: false
      # Options for automatic key sharing.
      key_sharing:
        # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
        # You must use a client that supports requesting keys from other users to use this feature.
        allow: false
        # Require the requesting device to have a valid cross-signing signature?
        # This doesn't require that the bridge has verified the device, only that the user has verified it.
        # Not yet implemented.
        require_cross_signing: false
        # Require devices to be verified by the bridge?
        # Verification by the bridge is not yet implemented.
        require_verification: true
    # Whether or not to explicitly set the avatar and room name for private
    # chat portal rooms. This will be implicitly enabled if encryption.default is true.
    private_chat_portal_meta: false
    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent to Signal. This let's you check manually whether the bridge is receiving your
    # messages.
    # Note that this is not related to Signal delivery receipts.
    delivery_receipts: false
    # Whether or not delivery errors should be reported as messages in the Matrix room. (not yet implemented)
    delivery_error_reports: false
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it,
    # except if the config file is not writable.
    resend_bridge_info: false

    # Provisioning API part of the web server for automated portal creation and fetching information.
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
      # Whether or not the provisioning API should be enabled.
      enabled: true
      # The prefix to use in the provisioning API endpoints.
      prefix: /_matrix/provision/v1
      # The shared secret to authorize users of the API.
      # Set to "generate" to generate and save a new token.
      shared_secret: generate

    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "!signal"

    # Permissions for using the bridge.
    # Permitted values:
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions: {}
    # "example.com": "user"
    # "@admin:example.com": "admin"

  # Python logging configuration.
  #
  # See section 16.7.2 of the Python documentation for more info:
  # https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
  logging:
    version: 1
    formatters:
      colored:
        (): mautrix_signal.util.ColorFormatter
        format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
      normal:
        format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colored
    loggers:
      mau:
        level: DEBUG
      aiohttp:
        level: INFO
    root:
      level: DEBUG
      handlers: [ console ]

registration:
  id: signal
  as_token:
  hs_token:
  namespaces:
    users:
      - exclusive: true
        regex: "@signal_.+:example.org"
        group_id: signal:example.org
  url: http://{{ include "mautrix-signal.fullname" . }}:29320
  sender_localpart: signalbot
  rate_limited: false

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}

deploymentAnnotations: {}

## Persist configuration to a persistent volume
persistence:
  # persistence.enabled - Should disk persistence be enabled
  enabled: false
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  existingClaim: ""
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  ## persistence.skipuninstall -- Do not delete the pvc upon helm uninstall
  skipuninstall: false
